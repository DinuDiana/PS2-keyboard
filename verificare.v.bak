module verificare (input clock_intermediar, reset, data_in, clock_fpga, output reg ok);

reg[3:0] count=0;

//verificam bitii de start si stop

localparam [2:0] q0=0, q1=1, q2=2, q3=3, q4=4, q5=5 ;
reg [1:0] state, next_state;
reg do_count = 0;

always @ (clock_fpga)
	state <= next_state;

always @ (*)
	case (state)
		q0: next_state = (clock_intermediar == 0) ? q1 : q0;
		q1: next_state = (data_in == 0) ? q2 : q0;
		q2: begin
				do_count = 1;
				next_state = (count == 9) ? q3 : q2;
			end
		q3: begin
				do_count = 0;
				next_state = (data_in == 1) ? q4 : q0;
			end
		q4: next_state = (clock_intermediar == 1) ? q5: q0;
		q5: next_state = q0;
		default: next_state = q0;
	endcase
	
always @ (negedge clock_intermediar)
	if (do_count == 1)
		count <= count + 1;
	else 
		count <= 0;
	
always @ (clock_fpga)
	case (state)
		q0: ok = 0;
		q1: ok = 0;
		q2: ok = 0;
		q3: ok = 0;
		q4: ok = 0;
		q5: ok = 1;
		default: ok = 0;
	endcase

endmodule 